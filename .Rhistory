## Put comments here that give an overall description of what your
## functions do
## The first function, makeCacheMatrix creates a special "vector",
## which is really a list containing a function to
## set/get the value of the vextor
## set/get the inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inverse) m <<- inverse
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getmean = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(x)
x$setin(m)
m
}
c <- rbind(c(1, -1/4), c(-1/4, 1))
c
makeCacheMatrix(c)
cacheSolve(c)
## Put comments here that give an overall description of what your
## functions do
## The first function, makeCacheMatrix creates a special "vector",
## which is really a list containing a function to
## set/get the value of the vextor
## set/get the inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inverse) m <<- inverse
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getmean = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(x)
x$setinv(m)
m
}
c
makeCacheMatrix(c)
cacheSolve(c)
## Put comments here that give an overall description of what your
## functions do
## The first function, makeCacheMatrix creates a special "vector",
## which is really a list containing a function to
## set/get the value of the vextor
## set/get the inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inverse) m <<- inverse
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(x)
x$setinv(m)
m
}
makeCacheMatrix(c)
cacheSolve(c)
matrix <- makeCacheMatrix(c)
cahceSolve(matrix)
## Put comments here that give an overall description of what your
## functions do
## The first function, makeCacheMatrix creates a special "vector",
## which is really a list containing a function to
## set/get the value of the vextor
## set/get the inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inverse) m <<- inverse
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(x)
x$setinv(m)
m
}
matrix
cacheSolve(matrix)
matrix$get()
## Put comments here that give an overall description of what your
## functions do
## The first function, makeCacheMatrix creates a special "vector",
## which is really a list containing a function to
## set/get the value of the vextor
## set/get the inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inverse) m <<- inverse
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinv(m)
m
}
matrix <- makeCacheMatrix(c)
cacheSolve(matrix)
cacheSolve(matrix)
## Pair of functions that cache the inverse of a matrix.
## The first function, makeCacheMatrix creates a special "matrix",
## which is really a list containing a function to
## set/get the value of the matrix
## set/get the inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inverse) m <<- inverse
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinv(m)
m
}
c <- rbind(c(1, -1/4), c(-1/4, 1))
matrix <- makeCacheMatrix(c)
cacheSolve(matrix)
cacheSolve(matrix)
